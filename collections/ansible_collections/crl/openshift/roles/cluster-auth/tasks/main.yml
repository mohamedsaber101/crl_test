---
- block:
  - name: Log in
    k8s_auth:
      username: "{{ k8s_auth_username }}"
      password: "{{ k8s_auth_password }}"
      host: "{{ k8s_auth_host }}"
      validate_certs: "{{ validate_certs }}"
    register: k8s_auth_results

  - name: Create group-sync-operator namespace
    k8s:
      name: group-sync-operator
      kind: Namespace
      state: present
      definition:
        metadata:
          labels:
            secrets: "oauth-groupsync-secret"
          annotations:
            openshift.io/node-selector: ""
      host: "{{ k8s_auth_host }}"
      api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      validate_certs: "{{ validate_certs }}"

  - name: Create group-sync-operator operatorgroup
    k8s:
      state: present
      definition: "{{ lookup('file', 'group-sync-operator-operatorgroup.yml') }}"
      host: "{{ k8s_auth_host }}"
      api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      validate_certs: "{{ validate_certs }}"

  - name: Install Group Sync operator
    k8s:
      state: present
      definition: "{{ lookup('file', 'group-sync-operator-subscription.yml') }}"
      host: "{{ k8s_auth_host }}"
      api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      validate_certs: "{{ validate_certs }}"

  - name: Wait for operators to install
    pause:
      seconds: {{ wait_time }}

  - name: Create groupsync custom resource
    k8s:
      state: present
      definition: "{{ lookup('file', 'groupsync-cr.yml') }}"
      host: "{{ k8s_auth_host }}"
      api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      validate_certs: "{{ validate_certs }}"

  - name: Create cluster-admin rolebinding
    k8s:
      state: present
      definition: "{{ lookup('file', 'cluster-admin-rolebinding.yml') }}"
      host: "{{ k8s_auth_host }}"
      api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      validate_certs: "{{ validate_certs }}"

  - name: Create LDAP Oauth config
    k8s:
      state: present
      definition: "{{ lookup('template', 'oauth-cluster.yml') }}"
      host: "{{ k8s_auth_host }}"
      api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      validate_certs: "{{ validate_certs }}"

  always:
  - name: Log out
    when: k8s_auth_results.k8s_auth.api_key is defined
    k8s_auth:
      state: absent
      host: "{{ k8s_auth_host }}"
      api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      validate_certs: "{{ validate_certs }}"
